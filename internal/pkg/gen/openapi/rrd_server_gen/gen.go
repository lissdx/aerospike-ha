// Package rrd_server_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package rrd_server_gen

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for MetricsDataType.
const (
	MetricsDataTypeBandwidth   MetricsDataType = "bandwidth"
	MetricsDataTypeCpu         MetricsDataType = "cpu"
	MetricsDataTypeNetwork     MetricsDataType = "network"
	MetricsDataTypeTemperature MetricsDataType = "temperature"
)

// Defines values for MetricType.
const (
	MetricTypeBandwidth   MetricType = "bandwidth"
	MetricTypeCpu         MetricType = "cpu"
	MetricTypeNetwork     MetricType = "network"
	MetricTypeTemperature MetricType = "temperature"
)

// Defines values for GetMetricsParamsType.
const (
	Bandwidth   GetMetricsParamsType = "bandwidth"
	Cpu         GetMetricsParamsType = "cpu"
	Network     GetMetricsParamsType = "network"
	Temperature GetMetricsParamsType = "temperature"
)

// MetricsData defines model for MetricsData.
type MetricsData struct {
	Metric    float64 `json:"metric"`
	Timestamp float64 `json:"timestamp"`

	// Type represents the type of metric
	Type MetricsDataType `json:"type"`
}

// MetricsDataType represents the type of metric
type MetricsDataType string

// OkResponse defines model for OkResponse.
type OkResponse struct {
	Msg    string `json:"msg"`
	Status int    `json:"status"`
}

// ProblemDetail defines model for ProblemDetail.
type ProblemDetail struct {
	Detail string `json:"detail"`
	Msg    string `json:"msg"`
	Status int    `json:"status"`
}

// EndTime defines model for EndTime.
type EndTime = float64

// MaxFetch defines model for MaxFetch.
type MaxFetch = int64

// MetricType defines model for MetricType.
type MetricType string

// StartTime defines model for StartTime.
type StartTime = float64

// BadRequest defines model for badRequest.
type BadRequest = ProblemDetail

// NotFound defines model for notFound.
type NotFound = ProblemDetail

// OkGetResponse defines model for okGetResponse.
type OkGetResponse = []MetricsData

// GetMetricsParams defines parameters for GetMetrics.
type GetMetricsParams struct {
	End      *EndTime              `form:"end,omitempty" json:"end,omitempty"`
	Start    *StartTime            `form:"start,omitempty" json:"start,omitempty"`
	Type     *GetMetricsParamsType `form:"type,omitempty" json:"type,omitempty"`
	MaxFetch *MaxFetch             `form:"max_fetch,omitempty" json:"max_fetch,omitempty"`
}

// GetMetricsParamsType defines parameters for GetMetrics.
type GetMetricsParamsType string

// PutMetricsJSONRequestBody defines body for PutMetrics for application/json ContentType.
type PutMetricsJSONRequestBody = MetricsData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// representing the metrics in the specified range
	// (GET /metrics)
	GetMetrics(ctx echo.Context, params GetMetricsParams) error

	// (PUT /metrics)
	PutMetrics(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMetricsParams
	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "max_fetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_fetch", ctx.QueryParams(), &params.MaxFetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_fetch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetrics(ctx, params)
	return err
}

// PutMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PutMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMetrics(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/metrics", wrapper.GetMetrics)
	router.PUT(baseURL+"/metrics", wrapper.PutMetrics)

}
